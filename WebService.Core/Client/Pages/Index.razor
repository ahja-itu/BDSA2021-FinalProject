@page "/"
@using WebService.Core.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient _http
<PageTitle>Index</PageTitle>
<style>
    .btgInput{
        background:transparent;
        box-shadow: none !important;
        border: none !important;
        outline: none ;
        padding:5px;
    }
    .btgInput::placeholder{
       color: #fff;
       opacity: 50%;
    }
    .btgIconButton{
        background:transparent !important;
        color:#7765E3;
        width:auto;
        box-shadow:none !important;
        border: none !important;
        outline: none ;
    }
    .btgIconButton:focus{
        background:transparent !important;
        color:#7765E3;
        width:auto;
        box-shadow:none !important;
        border: none !important;
        outline: none ;
    }
    .btgIconButton:hover{
        color:#FF9F1C;
        background:transparent !important;
    }
    .scroller {
        background-color: transparent;
        width: auto;
        height: 500px;
        overflow: auto;
    }
    .result{
        background: transparent;
        padding-top: 25px;
        height: 200px;
        max-height: 200px;
        min-width: auto;
        color: #7765E3;
    }
</style>
<h1 style="text-align: center; color:#ffffff">Bridge The Gap!</h1>
<!-- search bar -->
<div class="row" style="border-bottom:solid;border-color:#7765E3">
    <div class="col d-flex justify-content-center align-item-center" style="width:100%">
        <RadzenTextBox class="btgInput" Placeholder="HelloWorld!" Style="width:100%;font-size:2em"/>
        <RadzenButton class="btgIconButton" Click="Search" Icon="search"/>
    </div>
</div>
<!-- Filter box -->
@if (_advancedView)
{
    <div id="filters" class="row" style="margin-left:20px;margin-right:20px;background:#4E4E4E;border-radius: 24px;margin-top:15px;padding:25px">
        <div class="row">
            <div class="col" data-toggle="buttons">
                <RadzenButton id="tags" Click=@(_ => ChangeFilter("Tags")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Tags"/>
                <RadzenButton id="ratings" Click=@(_ => ChangeFilter("Ratings")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Ratings"/>
                <RadzenButton id="levels" Click=@(_ => ChangeFilter("Levels")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Levels"/>
                <RadzenButton id="programming Languages" Click=@(_ => ChangeFilter("Programing Languages")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Programing Languages"/>
                <RadzenButton id="languages" Click=@(_ => ChangeFilter("Languages")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Languages"/>
                <RadzenButton id="medias" Click=@(_ => ChangeFilter("Medias")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Medias"/>
            </div>
        </div>
        @if (_isShowingFilterOptions)
        {
            <div class="row" style="border-bottom:solid;border-color:#7765E3;width:auto;padding:0;">
                <div class="col">
                    <RadzenTextBox id="searchFilter" class="btgInput" onChange="SearchFilters" @bind-Value=@_filterSearchInput Placeholder="@_placeholder"/>
                    <RadzenButton Click="SearchFilters" Icon="search" class="btgIconButton smallIcon"/>
                </div>
            </div>
            <div class="row">
                @foreach (var str in _showCollection)
                {
                    <RadzenButton id="@FilterOptionIdGenerator()" Click=@(_ => AddFilterToList(str)) Style="border-radius: 24px; background: #fff; margin:10px; color:#7765E3; width: auto;" Text="@str"/>
                }
                <p>@_testString</p>

            </div>
        }
        else
        {
            <div class="row">
                <h3 style="margin-top: 2rem">Range Slider</h3>
                <RadzenSlider id="slider" @bind-Value=@_rating TValue="int" Step="1" Min="0" Max="10"/>
            </div>
        }
    </div>
}
<!-- Show Filter Button -->
<div class="row d-flex justify-content-center align-item-center">
    <RadzenButton id="filterButton" class="btgIconButton mediumIcon" Click="ShowFilters" Icon="@_displayIcon"/>
</div>
<!-- Search Box -->
@if (_hasResults)
{
    <div class="row scroller">
        @foreach (var material in _results)
        {
            <div class="result">
                <div style="border-left: 6px solid #7765E3; !important;">
                    <div class="row" style="margin-left: 5px">
                        <div class="col">
                            <a href="#" style="color:white;">
                                material.url
                            </a>
                        </div>
                        <div class="col" style="text-align: right">
                            <p>
                                @material.Language.Name
                            </p>
                        </div>
                    </div>
                    <div class="row" style="margin-left: 5px">
                        <div class="col">
                            <RadzenButton class="btgIconButton" Style="font-size: 20px; padding: 0">
                                @material.Title
                            </RadzenButton>
                        </div>
                        <div class="col" style="text-align: right">
                            <p>
                                @GetAvgRating(material)
                            </p>
                        </div>
                    </div>
                    <div style="color: white; margin-left: 5px">
                        <p>
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec scelerisque erat faucibus augue vulputate faucibus non sed orci. Vestibulum rutrum arcu in pretium eleifend. Ut ornare massa nec congue vehicula. Nulla quis lorem libero. Curabitur quis lacus imperdiet, tempus magna eget, vestibulum enim. Ut tincidunt lorem eu ante consequat, sit amet tincidunt nisi consequat...
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code{
    bool _hasResults;
    int _iDCounter;
    string _testString = "start";
    readonly string SearchInput = "";
    readonly ICollection<MaterialDTO> _results = new List<MaterialDTO>();

    private void Search()
    {
        _hasResults = true;
        var searchForm = new SearchForm
        {
            TextField = SearchInput,
            Tags = _tagsToSend.Select(str => new TagDTO(0, str)).ToList(),
            Levels = _levelsToSend.Select(str => new LevelDTO(0, str)).ToList(),
            ProgrammingLanguages = _programmingLangToSend.Select(str => new ProgrammingLanguageDTO(0, str)).ToList(),
            Languages = _lang.Select(str => new LanguageDTO(0, str)).ToList(),
            Medias = _medias.Select(str => new MediaDTO(0, str)).ToList(),
            Rating = _rating
        };

    // send results and receive results

        _hasResults = true;
    }

    readonly ICollection<string> _tags = new[] {"I", "am", "a", "tag"};
    readonly ICollection<string> _levels = new[] {"I", "am", "a", "level"};
    readonly ICollection<string> _programingLang = new[] {"I", "am", "a", "Programming", "language"};
    readonly ICollection<string> _lang = new[] {"I", "am", "a", "Language"};
    readonly ICollection<string> _medias = new[] {"We", "are", "a", "collection", "of", "medias"};

    ICollection<string> _lastCalledCollection = new List<string> {"Hello", "World", "!"};
    ICollection<string> _showCollection = new List<string> {"Hello", "World", "!"};

    string _collectionToSaveTo = "Tags";
    readonly ICollection<string> _tagsToSend = new string[] {};
    readonly ICollection<string> _levelsToSend = new string[] {};
    readonly ICollection<string> _programmingLangToSend = new string[] {};
    readonly ICollection<string> _langToSend = new string[] {};
    readonly ICollection<string> _mediaToSend = new string[] {};


    bool _isShowingFilterOptions = true;
    string _placeholder = "Search Tags";
    int _rating = 5;

    private void ChangeFilter(string filterName)
    {
        _placeholder = "Search " + filterName;
        if (filterName != "Ratings")
        {
            _isShowingFilterOptions = true;
            switch (filterName)
            {
                case "Tags":
                    ReplaceListWithBackup(ref _showCollection, _tags);
                    break;
                case "Levels":
                    ReplaceListWithBackup(ref _showCollection, _levels);
                    break;
                case "Programing Languages":
                    ReplaceListWithBackup(ref _showCollection, _programingLang);
                    break;
                case "Languages":
                    ReplaceListWithBackup(ref _showCollection, _lang);
                    break;
                case "Medias":
                    ReplaceListWithBackup(ref _showCollection, _medias);
                    break;
            }
            _collectionToSaveTo = filterName;
        }
        else
        {
            _isShowingFilterOptions = false;
        }
    }

    string _filterSearchInput = "";

    private void SearchFilters()
    {
        ReplaceListWithoutBackup(ref _showCollection, _lastCalledCollection);
        ICollection<string> toShow = _showCollection.Where(str => str.Contains(_filterSearchInput) || _filterSearchInput.Contains(str)).ToList();
        ReplaceListWithoutBackup(ref _showCollection, toShow);
    }

    bool _advancedView;
    string _displayIcon = "expand_more";

    private void ShowFilters()
    {
        _displayIcon = !_advancedView ? "expand_less" : "expand_more";
        _advancedView = !_advancedView;
    }

    private void ReplaceListWithBackup(ref ICollection<string> target, ICollection<string> source)
    {
        ReplaceListWithoutBackup(ref target, source);
        _lastCalledCollection = source;
    }

    private static void ReplaceListWithoutBackup(ref ICollection<string> target, IEnumerable<string> source)
    {
        target.Clear();
        foreach (var str in source)
        {
            target.Add(str);
        }
    }

    private void AddFilterToList(string toAdd)
    {
        switch (_collectionToSaveTo)
        {
            case "Tags":
                ToggleFilter(_tagsToSend, toAdd);
                break;
            case "Levels":
                ToggleFilter(_levelsToSend, toAdd);
                break;
            case "Programing Languages":
                ToggleFilter(_programmingLangToSend, toAdd);
                break;
            case "Languages":
                ToggleFilter(_langToSend, toAdd);
                break;
            case "Medias":
                ToggleFilter(_mediaToSend, toAdd);
                break;
        }
    }

    private void ToggleFilter(ICollection<string> list, string text)
    {
        _testString = "adding " + text;
        if (list.Contains(text))
        {
    //  list.Remove(text);
        }
        else
        {
            list.Add(text);
        }
    }

    private string FilterOptionIdGenerator()
    {
        _iDCounter++;
        return "FilterOption " + (_iDCounter - 1);
    }

    private static float GetAvgRating(CreateMaterialDTO material)
    {
        float sum = material.Ratings.Sum(e => e.Value);
        return sum / material.Ratings.Count;
    }


    /*
    protected override async Task OnInitializedAsync()
    {
        var tagsDTOs = await Http.GetFromJsonAsync<ICollection<TagDTO>>("api/Tag");
        var levelsDTOs = await Http.GetFromJsonAsync<ICollection<LevelDTO>>("api/Level");
        var programingLangDTOs = await Http.GetFromJsonAsync<ICollection<ProgrammingLanguageDTO>>("api/ProgrammingLanguage");
        var langDTOs = await Http.GetFromJsonAsync<ICollection<LanguageDTO>>("api/Language");
        var mediasDTOs = await Http.GetFromJsonAsync<ICollection<MediaDTO>>("api/Media");

        tags = tagsDTOs == null ? new List<string>() : tagsDTOs.Select(e => e.Name).ToList();
        tags = levelsDTOs == null ? new List<string>() : levelsDTOs.Select(e => e.Name).ToList();
        tags = programingLangDTOs == null ? new List<string>() : programingLangDTOs.Select(e => e.Name).ToList();
        tags = langDTOs == null ? new List<string>() : langDTOs.Select(e => e.Name).ToList();
        tags = mediasDTOs == null ? new List<string>() : mediasDTOs.Select(e => e.Name).ToList();
    }
    */
}