@page "/"
@using WebService.Core.Shared
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using System.Net
@attribute [Authorize]
@inject HttpClient _http
<PageTitle>Index</PageTitle>
<style>
    .btgInput{
        background:transparent;
        box-shadow: none !important;
        border: none !important;
        outline: none ;
        padding:5px;
    }
    .btgInput::placeholder{
       color: #fff;
       opacity: 50%;
    }
    .btgIconButton{
        background:transparent !important;
        color:#7765E3;
        width:auto;
        box-shadow:none !important;
        border: none !important;
        outline: none ;
    }
    .btgIconButton:focus{
        background:transparent !important;
        color:#7765E3;
        width:auto;
        box-shadow:none !important;
        border: none !important;
        outline: none ;
    }
    .btgIconButton:hover{
        color:#FF9F1C;
        background:transparent !important;
    }
    .scroller {
        background-color: transparent;
        width: auto;
        height: 500px;
        overflow: auto;
    }
    .mini-scroller {
            background-color: transparent;
            width: 100%;
            max-height: 250px;
            height: auto;
            overflow: auto;
    }
    .result{
        background: transparent;
        padding-top: 25px;
        height: 200px;
        max-height: 200px;
        min-width: auto;
        color: #7765E3;
    }
    .slider{
        background: #7765E3 !important;
        border-color: #8776E5 !important;
    }
    .slider span{
        background: #C2BAF2 !important;
        border-radius: 1rem;
        border-color: #8776E5 !important;
    }
    .slider span::before{
        color:#7765E3 !important;
    }
    input{
      color: #C2BAF2 !important;
    }
</style>
@if (_showingSearchForm)
{
    <!-- Search bar -->
    <div class="row" style="border-bottom:solid;border-color:#7765E3;padding-top: 20%">
        <div class="col d-flex justify-content-center align-item-center" style="width:100%">
            <RadzenTextBox class="btgInput" Placeholder="HelloWorld!" @bind-value="_searchInput" Style="width:100%;font-size:2em;"/>
            <RadzenButton class="btgIconButton" Click="Search" style="padding:0 0;width:40px;height:40px;">
                <i class="rzi" style="font-size:2em;">
                    search
                </i>
            </RadzenButton>
        </div>
    </div>
    <!-- Filter box -->
@if (_advancedView)
{
    <div id="filters" class="row" style="margin-left:20px;margin-right:20px;background:#4E4E4E;border-radius: 24px;margin-top:15px;padding:25px">
        <div class="row">
            <div class="col" data-toggle="buttons">
                <RadzenButton id="tags" Click=@(_ => ChangeFilter("Tags")) Style=@_tagStyle Text="Tags"/>
                <RadzenButton id="ratings" Click=@(_ => ChangeFilter("Ratings")) Style=@_ratingStyle Text="Ratings"/>
                <RadzenButton id="levels" Click=@(_ => ChangeFilter("Levels")) Style=@_levelStyle Text="Levels"/>
                <RadzenButton id="programming Languages" Click=@(_ => ChangeFilter("Programming Languages")) Style=@_programmingLanguageStyle Text="Programming Languages"/>
                <RadzenButton id="languages" Click=@(_ => ChangeFilter("Languages")) Style=@_languageStyle Text="Languages"/>
                <RadzenButton id="medias" Click=@(_ => ChangeFilter("Medias")) Style=@_mediaStyle Text="Medias"/>
            </div>
        </div>
        @if (_filterSelected)
        {
            @if (_isShowingFilterOptions)
            {
                <div class="row" style="border-bottom:solid;border-color:#7765E3;width:auto;padding:0;">
                    <div class="col">
                        <!-- SearchFilters() is null safe! -->
                        <RadzenTextBox id="searchFilter" class="btgInput" @oninput=@(args => { SearchFilters(args.Value!.ToString()!); }) @bind-Value=@_filterSearchInput Placeholder="@_searchFilterPlaceholder"/>
                        <RadzenButton Click=@(_ => SearchFilters(_filterSearchInput)) Icon="search" class="btgIconButton smallIcon"/>
                    </div>
                </div>
                <div class="row">
                    @foreach (var str in _selectedFilterOptions)
                    {
                        <RadzenButton id="@FilterOptionIdGenerator()" Click=@(_ => AddFilterToList(str)) Style="font-size:12px; border-radius: 24px; background: #FF9F1C; margin:10px; color:#fff; width: auto; padding:2px 5px;" Text="@str" Icon="close"/>
                    }
                </div>
                <div class="row mini-scroller">
                    @foreach (var str in _showCollection)
                    {
                        <RadzenButton id="@FilterOptionIdGenerator()" Click=@(_ => AddFilterToList(str)) Style="border-radius: 24px; background: #fff; margin:10px; color:#7765E3; width: auto;" Text="@str"/>
                    }
                </div>
            }
            else
            {
                <div class="row">
                    <p style="margin-top: 2rem">Minimum rating: @_rating</p>
                    <RadzenSlider class="slider" id="slider" @bind-Value=@_rating TValue="int" Step="1" Min="0" Max="10"/>
                </div>
            }
        }
    </div>
}
    <!-- Show Filter Button -->
    <div class="row d-flex justify-content-left align-item-left">
        <RadzenButton id="filterButton" class="btgIconButton mediumIcon" Click="ShowFilters" Icon="@_displayIcon"/>
    </div>
    <div class="row d-flex justify-content-center align-item-center">
        <RadzenButton Click="Search" Text="Search" Style="font-size: 20px; border-radius: 24px; background: #fff; margin:10px; color:#7765E3; width: auto;"/>
    </div>

    <!-- Results Box -->
    @if (_noResultsFound)
    {
        <div class="row">
            <p>No results found</p>
        </div>
    }
@if (_searchResults != null)
{
    <div class="row scroller">
        @foreach (var material in _searchResults)
        {
            <div class="result">
                <div style="border-left: 6px solid #7765E3; !important;">
                    <div class="row" style="margin-left: 5px">
                        <div class="col">
                            <a href="@material.Url" style="color:rgba(255, 255, 255, 0.5);">
                                @material.Url
                            </a>
                        </div>
                        <div class="col" style="text-align: right">
                            <RadzenButton class="btgIconButton" Disabled="true" Icon="language" Text=@material.Language.Name></RadzenButton>
                        </div>
                    </div>
                    <div class="row" style="margin-left: 5px">
                        <div class="col">
                            <RadzenButton class="btgIconButton" Click="@(_ => ShowSelectedMaterial(material.Id))" Style="text-align: left;font-size: 20px; padding: 0">
                                @material.Title
                            </RadzenButton>
                        </div>
                        <div class="col" style="text-align: right">
                            <RadzenButton class="btgIconButton" Disabled="true" Icon="star_rate" Text=@material.AverageRatingToString()></RadzenButton>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col" style="text-align: right">
                            <RadzenButton class="btgIconButton" Disabled="true" Icon="school" Text=@material.LevelsToString()></RadzenButton>
                        </div>
                    </div>
                    <div style="color: white; margin-left: 5px">
                        <p>
                            @material.Summary
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}
}
else
{
    <div style="text-align: right">
        <RadzenButton class="btgIconButton" Icon="close" Click="CloseMaterial"></RadzenButton>
    </div>
    <div style="background: #4E4E4E;border-radius: 15px">
        <div style="padding: 10px">
            <div class="row">
                <div class="col-6">
                    <!-- _selectedMaterial can't be null as it is the material the user selects from the results list -->
                    <a href="@_selectedMaterial!.Url">@_selectedMaterial.Url</a>
                </div>
                <div class="col-6">
                    <p style="text-align: right;">@_selectedMaterial.TimeStamp.ToString(CultureInfo.CurrentCulture)</p>
                </div>
            </div>
            <div class="row">
                <h3 style="color:#9586E9">@_selectedMaterial.Title</h3>
            </div>
            <div class="row">
                <div class="col-6">
                    <p>@_selectedMaterial.AuthorsToString()</p>
                </div>
                <div class="col-6" style="text-align: right">
                    <RadzenButton class="btgIconButton" Disabled="true" Icon="language" Text=@_selectedMaterial.Language.Name></RadzenButton>
                </div>
            </div>
            <div class="row">
                <div class="col" style="text-align: right">
                    <RadzenButton class="btgIconButton" Disabled="true" Icon="school" Text=@_selectedMaterial.LevelsToString()></RadzenButton>
                </div>
            </div>
            <div class="row" style="border-bottom: solid 6px #9586E9; padding-bottom: 5px">
                <div class="col-6">
                    @foreach (var tag in _selectedMaterial.Tags)
                    {
                        <RadzenButton Disabled="true" style="background: #fff;color: #9586E9;border-radius: 15px; font-size: 12px">@tag.Name</RadzenButton>
                    }
                </div>
                <div class="col-6" style="text-align: right">
                    <RadzenButton class="btgIconButton" Disabled="true" Icon="star_rate" Text=@_selectedMaterial.AverageRatingToString()></RadzenButton>
                </div>
            </div>
        </div>
        <div style="padding: 20px">
            <p>@_selectedMaterial.Content</p>
        </div>
    </div>
}

@code{

    #region AdvancedSearchViewHandlers

    #region DisplayHandler

    bool _advancedView;
    string _displayIcon = "expand_more";

    void ShowFilters()
    {
        _displayIcon = !_advancedView ? "expand_less" : "expand_more";
        _advancedView = !_advancedView;
    }

    #endregion

    #region FilterSearchHandler

    string _searchFilterPlaceholder = "Search Tags";
    string _filterSearchInput = "";
    ICollection<string> _lastCalledCollection = new List<string>();
    ICollection<string> _showCollection = new List<string>();

    void SearchFilters(string val)
    {
        ReplaceListWithoutBackup(ref _showCollection, _lastCalledCollection);
        ReplaceListWithoutBackup(ref _showCollection, _showCollection.Where(str => str.ToLower().Contains(val.ToLower()) || val.ToLower().Contains(str.ToLower())).ToList());
    }

    #endregion

    #region ChangeFilter

    bool _filterSelected;
    bool _isShowingFilterOptions;
    string _collectionToSaveTo = "Tags";
    ICollection<string> _tags = new List<string>();
    ICollection<string> _levels = new List<string>();
    ICollection<string> _programmingLanguages = new List<string>();
    ICollection<string> _language = new List<string>();
    ICollection<string> _medias = new List<string>();
    ICollection<string> _selectedFilterOptions = new List<string>();

    string _tagStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
    string _levelStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
    string _programmingLanguageStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
    string _languageStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
    string _mediaStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
    string _ratingStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";

    void ChangeFilter(string filterName)
    {
        _filterSelected = true;
        _filterSearchInput = "";
        _searchFilterPlaceholder = "Search " + filterName;
        SetChecked(filterName);
        if (filterName != "Ratings")
        {
            _isShowingFilterOptions = true;
            switch (filterName)
            {
                case "Tags":
                    _selectedFilterOptions = _tagsToSend;
                    ReplaceListWithBackup(ref _showCollection, _tags);
                    break;
                case "Levels":
                    _selectedFilterOptions = _levelsToSend;
                    ReplaceListWithBackup(ref _showCollection, _levels);
                    break;
                case "Programming Languages":
                    _selectedFilterOptions = _programmingLanguagesToSend;
                    ReplaceListWithBackup(ref _showCollection, _programmingLanguages);
                    break;
                case "Languages":
                    _selectedFilterOptions = _languagesToSend;
                    ReplaceListWithBackup(ref _showCollection, _language);
                    break;
                case "Medias":
                    _selectedFilterOptions = _mediasToSend;
                    ReplaceListWithBackup(ref _showCollection, _medias);
                    break;
            }
            _collectionToSaveTo = filterName;
        }
        else
        {
            _isShowingFilterOptions = false;
        }
    }

    void SetChecked(string filterName)
    {
        _tagStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
        _levelStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
        _programmingLanguageStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
        _languageStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
        _mediaStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";
        _ratingStyle = "border-radius: 24px; background: #fff;color:#7765E3;margin:10px;";

        switch (filterName)
        {
            case "Tags":
                _tagStyle = "border-radius: 24px; background: #7765E3;color:#fff;margin:10px;";
                break;
            case "Levels":
                _levelStyle = "border-radius: 24px; background: #7765E3;color:#fff;margin:10px;";
                break;
            case "Programming Languages":
                _programmingLanguageStyle = "border-radius: 24px; background: #7765E3;color:#fff;margin:10px;";
                break;
            case "Languages":
                _languageStyle = "border-radius: 24px; background: #7765E3;color:#fff;margin:10px;";
                break;
            case "Medias":
                _mediaStyle = "border-radius: 24px; background: #7765E3;color:#fff;margin:10px;";
                break;
            case "Ratings":
                _ratingStyle = "border-radius: 24px; background: #7765E3;color:#fff;margin:10px;";
                break;
        }
    }

    void ReplaceListWithBackup(ref ICollection<string> target, ICollection<string> source)
    {
        ReplaceListWithoutBackup(ref target, source);
        _lastCalledCollection = source;
    }

    static void ReplaceListWithoutBackup(ref ICollection<string> target, IEnumerable<string> source)
    {
        target.Clear();
        foreach (var str in source) target.Add(str);
    }

    #endregion

    #region AddFilter

    void AddFilterToList(string toAdd)
    {
        switch (_collectionToSaveTo)
        {
            case "Tags":
                ToggleFilter(ref _tagsToSend, toAdd);
                break;
            case "Levels":
                ToggleFilter(ref _levelsToSend, toAdd);
                break;
            case "Programming Languages":
                ToggleFilter(ref _programmingLanguagesToSend, toAdd);
                break;
            case "Languages":
                ToggleFilter(ref _languagesToSend, toAdd);
                break;
            case "Medias":
                ToggleFilter(ref _mediasToSend, toAdd);
                break;
        }
    }

    static void ToggleFilter(ref ICollection<string> list, string val)
    {
        if (list.Contains(val)) list.Remove(val);
        else list.Add(val);
    }

    #endregion

    int _iDCounter;

    string FilterOptionIdGenerator()
    {
        _iDCounter++;
        return "FilterOption " + (_iDCounter - 1);
    }

    #endregion

    #region SearchFormHandler

    string _searchInput = "";
    int _rating = 1;
    bool _noResultsFound;
    ICollection<string> _tagsToSend = new List<string>();
    ICollection<string> _levelsToSend = new List<string>();
    ICollection<string> _programmingLanguagesToSend = new List<string>();
    ICollection<string> _languagesToSend = new List<string>();
    ICollection<string> _mediasToSend = new List<string>();

    IEnumerable<MaterialDTO>? _searchResults;

    async Task Search()
    {
        _noResultsFound = false;
        var searchForm = new SearchForm(
            _searchInput,
            _tagsToSend.Select(e => new TagDTO(0, e)).ToList(),
            _levelsToSend.Select(e => new LevelDTO(0, e)).ToList(),
            _programmingLanguagesToSend.Select(e => new ProgrammingLanguageDTO(0, e)).ToList(),
            _languagesToSend.Select(e => new LanguageDTO(0, e)).ToList(),
            _mediasToSend.Select(e => new MediaDTO(0, e)).ToList(),
            _rating);
        _searchResults = null;
        var response = await _http.PostAsJsonAsync("Search", searchForm);
        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            _noResultsFound = true;
        }
        else
        {
            _searchResults = await response.Content.ReadFromJsonAsync<ICollection<MaterialDTO>>();
        }
    }

    #endregion

    #region SelectedMaterialHandler

    bool _showingSearchForm = true;
    MaterialDTO? _selectedMaterial;

    void ShowSelectedMaterial(int id)
    {
        foreach (var dto in _searchResults!)
        {
            if (dto.Id != id) continue;
            _selectedMaterial = dto;
            _showingSearchForm = false;
            return;
        }
    }

    void CloseMaterial()
    {
        _showingSearchForm = true;
    }

    #endregion

    #region INITAPICalls

    protected override async Task OnInitializedAsync()
    {
        await GetTagsFromApi();
        await GetLevelsFromApi();
        await GetProgrammingLanguagesFromApi();
        await GetLanguagesFromApi();
        await GetMediasFromApi();
    }

    async Task GetTagsFromApi()
    {
        var tagDTOs = await _http.GetFromJsonAsync<ICollection<TagDTO>>("Tag");
        _tags = tagDTOs == null ? new List<string>() : tagDTOs.Select(e => e.Name).ToList();
    }

    async Task GetLevelsFromApi()
    {
        var levelsDTOs = await _http.GetFromJsonAsync<ICollection<LevelDTO>>("Level");
        _levels = levelsDTOs == null ? new List<string>() : levelsDTOs.Select(e => e.Name).ToList();
    }

    async Task GetProgrammingLanguagesFromApi()
    {
        var programmingLanguageDTOs = await _http.GetFromJsonAsync<ICollection<ProgrammingLanguageDTO>>("ProgrammingLanguage");
        _programmingLanguages = programmingLanguageDTOs == null ? new List<string>() : programmingLanguageDTOs.Select(e => e.Name).ToList();
    }

    async Task GetLanguagesFromApi()
    {
        var languageDTOs = await _http.GetFromJsonAsync<ICollection<LanguageDTO>>("Language");
        _language = languageDTOs == null ? new List<string>() : languageDTOs.Select(e => e.Name).ToList();
    }

    async Task GetMediasFromApi()
    {
        var mediasDTOs = await _http.GetFromJsonAsync<ICollection<MediaDTO>>("Media");
        _medias = mediasDTOs == null ? new List<string>() : mediasDTOs.Select(e => e.Name).ToList();
    }

    #endregion

}