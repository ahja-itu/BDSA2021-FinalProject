@page "/"
@using Microsoft.AspNetCore.Authorization
@using WebService.Core.Shared
@attribute [Authorize]
@inject HttpClient Http
<PageTitle>Index</PageTitle>
<style>
    .btgInput{
        background:transparent;
        box-shadow: none !important;
        border: none !important;
        outline: none ;
        padding:5px;
    }
    .btgInput::placeholder{
       color: #fff;
       opacity: 50%;
    }
    .btgIconButton{
        background:transparent !important;
        color:#7765E3;
        width:auto;
        box-shadow:none !important;
        border: none !important;
        outline: none ;
    }
    .btgIconButton:focus{
        background:transparent !important;
        color:#7765E3;
        width:auto;
        box-shadow:none !important;
        border: none !important;
        outline: none ;
    }
    .btgIconButton:hover{
        color:#FF9F1C;
        background:transparent !important;
    }
    .scroller {
        background-color: transparent;
        width: auto;
        height: 500px;
        overflow: auto;
    }
    .result{
        background: transparent;
        padding: 25px;
        border-left: solid;
        border-color: #7765E3;
        height: 200px;
        max-height: 200px;
        min-width: auto;
        color: #7765E3;
    }
</style>
<h1 style="text-align: center; color:#ffffff" >Bridge The Gap!</h1>
<!-- search bar -->
<div class="row" style="border-bottom:solid;border-color:#7765E3">
    <div class="col d-flex justify-content-center align-item-center" style="width:100%">
        <RadzenTextBox class="btgInput" Placeholder="HelloWorld!" Style="width:100%;font-size:2em"/>
        <RadzenButton class="btgIconButton" Click="Search" Icon="search"/>  
    </div>
</div>
<!-- Filter box bar -->
@if (AdvancedView)
{
    <div id="filters" class="row" style="margin-left:20px;margin-right:20px;background:#4E4E4E;border-radius: 24px;margin-top:15px;padding:25px">
        <div class="row">
            <div class="col" data-toggle="buttons">
                <RadzenButton id="tags" Click=@(_ => ChangeFilter("Tags")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Tags"/>
                <RadzenButton id="ratings" Click=@(_ => ChangeFilter("Ratings")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Ratings"/>
                <RadzenButton id="levels" Click=@(_ => ChangeFilter("Levels")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Levels"/>
                <RadzenButton id="programming Languages" Click=@(_ => ChangeFilter("Programing Languages")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Programing Languages"/>
                <RadzenButton id="languages" Click=@(_ => ChangeFilter("Languages")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Languages"/>
                <RadzenButton id="medias" Click=@(_ => ChangeFilter("Medias")) Style="border-radius: 24px; background: #ffffff;margin:10px;color:#7765E3" Text="Medias"/>
            </div>
        </div>
        @if (IsShowingFilterOptions)
        {
            <div class="row" style="border-bottom:solid;border-color:#7765E3;width:auto;padding:0;">
                <div class="col">
                    <RadzenTextBox id="searchFilter" class="btgInput" onChange="SearchFilters" @bind-Value=@FilterSearchInput Placeholder="@placeholder"/>
                    <RadzenButton Click="SearchFilters" Icon="search" class="btgIconButton smallIcon"/> 
                </div>
            </div>
            <div class="row">
                @foreach (var str in showCollection)
                {
                    <RadzenButton id="@FitlerOptionIdGenerator()" Click=@(_ => AddFilterToList(str)) Style="border-radius: 24px; background: #fff; margin:10px; color:#7765E3; width: auto;" Text="@str"/>
                }
                <p>@teststring</p>

            </div>
        }
        else
        {
            <div class="row">
                <h3 style="margin-top: 2rem">Range Slider</h3>
                <RadzenSlider @bind-Value=@rating TValue="int" Step="1" Min="0" Max="10" />
            </div>
        }  
    </div>
}
<!-- Show Filter Button -->
<div class="row d-flex justify-content-center align-item-center">
    <RadzenButton id="filterButton" class="btgIconButton mediumIcon" Click="ShowFilters" Icon="@displayIcon"/>
</div>
<!-- search bar -->
@if (true)
{
    <div class="row scroller">  
        @foreach (var material in Results)
        {
            <div class="row result">
                <div class="row">
                    <div class="col"><a href="#" style="color:white;">material.url</a></div>
                    <div class="col" style="text-align: right"><p>@material.Language.Name</p></div>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton class="btgIconButton" Style="font-size: 20px; padding: 0">@material.Title</RadzenButton>
                    </div>
                    <div class="col" style="text-align: right"><p>@GetAvgRating(material)</p></div>
                </div>
                <div style="color: white">
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec scelerisque erat faucibus augue vulputate faucibus non sed orci. Vestibulum rutrum arcu in pretium eleifend. Ut ornare massa nec congue vehicula. Nulla quis lorem libero. Curabitur quis lacus imperdiet, tempus magna eget, vestibulum enim. Ut tincidunt lorem eu ante consequat, sit amet tincidunt nisi consequat...</p>
                </div>
            </div>
        }
    </div>
}
@code{
    bool ShowResults = false;
    int iDCounter = 0;
    string teststring = "start";
    string SearchInput = "";
    private void Search() => Console.WriteLine(SearchInput);

    ICollection<MaterialDTO> Results = new []{
        new MaterialDTO(1,
            new CreateWeightedTagDTO[]{},
            new CreateRatingDTO[]
            {
                new RatingDTO(0,1,"p1"),
                new RatingDTO(1,7,"p2"),
                new RatingDTO(2,3,"p3"),
                new RatingDTO(3,6,"p4"),
                new RatingDTO(4,7,"p6"),
            },
            new CreateLevelDTO[]{},
            new CreateProgrammingLanguageDTO[]{},
            new CreateMediaDTO[]{},
            new CreateLanguageDTO("englando"),
            null,"test 0",
            new CreateAuthorDTO[]{},
            new DateTime()
        ),
        new MaterialDTO(1,
            new CreateWeightedTagDTO[]{},
            new CreateRatingDTO[]
            {
                new RatingDTO(0,1,"p1"),
                new RatingDTO(1,7,"p2"),
                new RatingDTO(2,3,"p3"),
                new RatingDTO(3,6,"p4"),
                new RatingDTO(4,7,"p6"),
            },
            new CreateLevelDTO[]{},
            new CreateProgrammingLanguageDTO[]{},
            new CreateMediaDTO[]{},
            new CreateLanguageDTO("englando"),
            null,"test 1",
            new CreateAuthorDTO[]{},
            new DateTime()
            ),
        new MaterialDTO(1,
            new CreateWeightedTagDTO[]{},
            new CreateRatingDTO[]
            {
                new RatingDTO(0,1,"p1"),
                new RatingDTO(1,7,"p2"),
                new RatingDTO(2,3,"p3"),
                new RatingDTO(3,6,"p4"),
                new RatingDTO(4,7,"p6"),
            },
            new CreateLevelDTO[]{},
            new CreateProgrammingLanguageDTO[]{},
            new CreateMediaDTO[]{},
            new CreateLanguageDTO("englando"),
            null,"test 2",
            new CreateAuthorDTO[]{},
            new DateTime()
            ),new MaterialDTO(1,
                new CreateWeightedTagDTO[]{},
                new CreateRatingDTO[]
                {
                    new RatingDTO(0,1,"p1"),
                    new RatingDTO(1,7,"p2"),
                    new RatingDTO(2,3,"p3"),
                    new RatingDTO(3,6,"p4"),
                    new RatingDTO(4,7,"p6"),
                },
                new CreateLevelDTO[]{},
                new CreateProgrammingLanguageDTO[]{},
                new CreateMediaDTO[]{},
                new CreateLanguageDTO("englando"),
                null,"test 3",
                new CreateAuthorDTO[]{},
                new DateTime()
                ),
        new MaterialDTO(1,
            new CreateWeightedTagDTO[]{},
            new CreateRatingDTO[]
            {
                new RatingDTO(0,1,"p1"),
                new RatingDTO(1,7,"p2"),
                new RatingDTO(2,3,"p3"),
                new RatingDTO(3,6,"p4"),
                new RatingDTO(4,7,"p6"),
            },
            new CreateLevelDTO[]{},
            new CreateProgrammingLanguageDTO[]{},
            new CreateMediaDTO[]{},
            new CreateLanguageDTO("englando"),
            null,"test 4",
            new CreateAuthorDTO[]{},
            new DateTime()
            ),
        new MaterialDTO(1,
            new CreateWeightedTagDTO[]{},
            new CreateRatingDTO[]
            {
                new RatingDTO(0,1,"p1"),
                new RatingDTO(1,7,"p2"),
                new RatingDTO(2,3,"p3"),
                new RatingDTO(3,6,"p4"),
                new RatingDTO(4,7,"p6"),
            },
            new CreateLevelDTO[]{},
            new CreateProgrammingLanguageDTO[]{},
            new CreateMediaDTO[]{},
            new CreateLanguageDTO("englando"),
            null,"test 5",
            new CreateAuthorDTO[]{},
            new DateTime()
            )
    };

    ICollection<string> tags = new[] {"I", "am", "a","tag"};
    ICollection<string> levels = new[] {"I", "am", "a","level"};
    ICollection<string> programingLang = new[] {"I", "am", "a","Programming","language"};
    ICollection<string> lang = new[] {"I", "am", "a","Language"};
    ICollection<string> medias = new[] {"We", "are", "a","collection","of","medias"};

    ICollection<string> lastCalledCollection = new List<string> { "Hello","World","!"};
    ICollection<string> showCollection = new List<string> { "Hello","World","!"};

    string collectionToSaveTo = "Tags";
    ICollection<string> tagsToSend = new string[] { };
    ICollection<string> levelsToSend = new string[] { };
    ICollection<string> programmingLangToSend = new string[] { };
    ICollection<string> langToSend = new string[] { };
    ICollection<string> mediaToSend = new string[] { };



    bool IsShowingFilterOptions = true;
    string placeholder = "Search Tags";
    int rating = 5;
    private void ChangeFilter(string filterName)
    {
        placeholder = "Search " + filterName;
        if (filterName != "Ratings")
        {
            IsShowingFilterOptions = true;
            switch (filterName)
            {
                case "Tags":
                    ReplaceListWithBackup(ref showCollection, tags);
                    break;
                case "Levels":
                    ReplaceListWithBackup(ref showCollection, levels);
                    break;
                case "Programing Languages":
                    ReplaceListWithBackup(ref showCollection, programingLang);
                    break;
                case "Languages":
                    ReplaceListWithBackup(ref showCollection, lang);
                    break;
                case "Medias":
                    ReplaceListWithBackup(ref showCollection, medias);
                    break;
            }
            collectionToSaveTo = filterName;
        }
        else
        {
            IsShowingFilterOptions = false;
        }
    }

    string FilterSearchInput = "";
    private void SearchFilters()
    {
        ReplaceListWithoutBackup(ref showCollection, lastCalledCollection);
        ICollection<string> ToShow = showCollection.Where(str => str.Contains(FilterSearchInput) || FilterSearchInput.Contains(str)).ToList();
        ReplaceListWithoutBackup(ref showCollection, ToShow);
    }

    bool AdvancedView;
    string displayIcon = "expand_more";
    private void ShowFilters()
    {
        displayIcon = !AdvancedView ? "expand_less" : "expand_more";
        AdvancedView = !AdvancedView;
    }
    private void ReplaceListWithBackup(ref ICollection<string> target, ICollection<string> source)
    {
        ReplaceListWithoutBackup(ref target, source);
        lastCalledCollection = source;
    }
    private void ReplaceListWithoutBackup(ref ICollection<string> target, ICollection<string> source)
    {
        target.Clear();
        foreach(var str in source) 
        {
            target.Add(str);
        }
    }

    private void AddFilterToList(string toAdd)
    {
        switch (collectionToSaveTo)
        {
            case "Tags":
                ToggleFilter(tagsToSend, toAdd);
                break;
            case "Levels":
                ToggleFilter(levelsToSend, toAdd);
                break;
            case "Programing Languages":
                ToggleFilter(programmingLangToSend, toAdd);
                break;
            case "Languages":
                ToggleFilter(langToSend, toAdd);
                break;
            case "Medias":
                ToggleFilter(mediaToSend, toAdd);
                break;
        }
    }

    private void ToggleFilter(ICollection<string> list,string text)
    {
        teststring = "adding " + text;
        if (list.Contains(text))
        {
            //  list.Remove(text);
        }
        else
        {
           list.Add(text);
        }
    }

    private string FitlerOptionIdGenerator()
    {
        iDCounter++;
        return "FilterOption " + (iDCounter - 1);
    }

    private float GetAvgRating(MaterialDTO material)
    {
        float sum = material.Ratings.Sum(rating => rating.Value);
        return sum / material.Ratings.Count;
    }


    /*
    protected override async Task OnInitializedAsync()
    {
        var tagsDTOs = await Http.GetFromJsonAsync<ICollection<TagDTO>>("api/Tag");
        var levelsDTOs = await Http.GetFromJsonAsync<ICollection<LevelDTO>>("api/Level");
        var programingLangDTOs = await Http.GetFromJsonAsync<ICollection<ProgrammingLanguageDTO>>("api/ProgrammingLanguage");
        var langDTOs = await Http.GetFromJsonAsync<ICollection<LanguageDTO>>("api/Language");
        var mediasDTOs = await Http.GetFromJsonAsync<ICollection<MediaDTO>>("api/Media");

        tags = tagsDTOs == null ? new List<string>() : tagsDTOs.Select(e => e.Name).ToList();
        tags = levelsDTOs == null ? new List<string>() : levelsDTOs.Select(e => e.Name).ToList();
        tags = programingLangDTOs == null ? new List<string>() : programingLangDTOs.Select(e => e.Name).ToList();
        tags = langDTOs == null ? new List<string>() : langDTOs.Select(e => e.Name).ToList();
        tags = mediasDTOs == null ? new List<string>() : mediasDTOs.Select(e => e.Name).ToList();
    }
    */
}